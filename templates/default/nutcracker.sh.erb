#!/bin/bash
### BEGIN INIT INFO
# Provides:          nutcracker_<%= @port %>
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Stop/start nutcracker_<%= @port %>
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/usr/sbin:/bin:/usr/bin
NAME=nutcracker_<%= @port %>
DESC="nutcracker on port <%= @port %>"
CONFFILE=/etc/nutcracker/${NAME}.yml
LOGFILE=/var/log/nutcracker/${NAME}.log
DAEMON="<%= @executable %>"
PIDFILE=/var/run/nutcracker/${NAME}.pid
DAEMON_ARGS="-c ${CONFFILE} -o ${LOGFILE} -p ${PIDFILE} -s 8622 -d"
SCRIPTNAME=/etc/init.d/${NAME}

[ -x $DAEMON ] || exit 0
# Include global nutcracker defaults if available
if [ -f /etc/default/nutcracker ]; then
    . /etc/default/nutcracker
fi
# Include default nutcracker settings for this specific instance
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
. /lib/init/vars.sh
. /lib/lsb/init-functions

ulimit -n 32768

test_config() {
    if ${DAEMON} -t -c ${CONFFILE} >/dev/null 2>&1; then
        return 0
    else
        ${DAEMON} -t -c ${CONFFILE}
        return $?
    fi
}

do_start()
{
    # Check if the MAX_FDS limit is set in /etc/default/nutcracker
    if [ -n "${MAX_FDS}" ]; then
        # Set the MAX_FDS limit
        ulimit -n ${MAX_FDS}
    fi
    test_config
    start-stop-daemon --start --quiet --pidfile ${PIDFILE} --exec ${DAEMON} \
        --chuid "<%= @username %>:<%= @usergroup %>" -- ${DAEMON_ARGS}
    RETVAL="$?"
    return "${RETVAL}"
}

do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    kill -9 `cat ${PIDFILE}`
    RETVAL="$?"
    rm -f ${PIDFILE}
    return "${RETVAL}"
}

case "$1" in
    start)
        [ "${VERBOSE}" != no ] && log_daemon_msg "Starting ${DESC} " "${NAME}"
        do_start
        case "$?" in
            0|1) [ "${VERBOSE}" != no ] && log_end_msg 0 ;;
            2) [ "${VERBOSE}" != no ] && log_end_msg 1 ;;
        esac
    ;;
    stop)
        [ "${VERBOSE}" != no ] && log_daemon_msg "Stopping ${DESC}" "${NAME}"
        do_stop
        case "$?" in
            0|1) [ "${VERBOSE}" != no ] && log_end_msg 0 ;;
            2) [ "${VERBOSE}" != no ] && log_end_msg 1 ;;
        esac
    ;;
    status)
        ps -ef | grep `cat ${PIDFILE}`
        case "$?" in
            0|1)
                echo "nutcracker ${NAME} is running..."
            ;;
            2)
                echo "nutcracker ${NAME} isn't running..."
            ;;
         esac
    ;;
    restart)
        log_daemon_msg "Restarting ${DESC}" "${NAME}"
        test_config
        do_stop
        echo "nutcracker has stopped..."
        do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
    ;;
    configtest|testconfig)
        echo -n "Testing ${DESC} configuration: "
        if test_config; then
            echo "${NAME}."
        else
            exit $?
        fi
    ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|configtest}" >&2
        exit 3
        ;;
esac

exit ${RETVAL}
